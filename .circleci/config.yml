version: 2

jobs:
  build:
    machine:
      image: circleci/classic:latest

    # docker:
    #   - image: cumuluss/circleci:node-8.11
    #   - name: localstack
    #     image: localstack/localstack:0.8.7
    #     environment:
    #       ENV_INTERNAL_TEST_RUN: true
    #       DEBUG: 1
    #       SERVICES: 'kinesis,lambda,s3,sns,sqs,dynamodb,dynamodbstreams'
    #   - name: elastichost
    #     image: elasticsearch:5.6
    #     environment:
    #       # limit memory usage to 750mb
    #       ES_JAVA_OPTS: "-Xms750m -Xmx750m"

    working_directory: ~/project
    steps:
      - checkout

      - run:
          name: start docker services
          command: docker-compose run -d local

      - restore_cache:
          keys:
            - core-{{ checksum "lerna.json" }}-{{ checksum "package.json" }}
            - core-

      - run:
          name: core installation
          command: |
            yarn

            # generate global hash
            ./node_modules/.bin/lerna exec --concurrency 1 -- sha1sum package.json | awk '{print $1}' '' >> /home/circleci/project/global-hash

      - save_cache:
          paths:
            - ./node_modules
          key: core-{{ checksum "lerna.json" }}-{{ checksum "package.json" }}
      
      - restore_cache:
          keys:
            - packages-{{ checksum "global-hash" }}

      - restore_cache:
          keys:
            - cumulus-tasks-{{ checksum "global-hash" }}

      - run:
          name: Installing Dependencies
          command: |
            # start ftp
            sudo rm -rf /home/vsftpd
            sudo ln -s /home/circleci/project/packages/test-data /home/vsftpd
            sudo service vsftpd start || true

            # start http service
            sudo rm -rf /var/www/html
            sudo ln -s /home/circleci/project/packages/test-data /var/www/html
            sudo service apache2 start

            # start sftp service
            sudo bash /usr/sbin/sftp.sh user:password
            sudo cp -r /home/circleci/project/packages/test-data/* /home/user/
            sudo cp -r /home/circleci/project/packages/test-data/keys /home/user/.ssh

            yarn bootstrap-no-build
            mkdir .final_nyc_output

      - save_cache:
          key: packages-{{ checksum "global-hash" }}
          paths:
            - ./packages/deployment/node_modules
            - ./packages/pvl/node_modules
            - ./packages/test-data/node_modules
            - ./packages/api/node_modules
            - ./packages/common/node_modules
            - ./packages/cmrjs/node_modules
            - ./packages/ingest/node_modules
            - ./packages/integration-tests/node_modules
            - ./packages/task-debug/node_modules

      - save_cache:
          key: cumulus-tasks-{{ checksum "global-hash" }}
          paths:
            - ./tasks/hello-world/node_modules
            - ./tasks/discover-granules/node_modules
            - ./tasks/discover-pdrs/node_modules
            - ./tasks/parse-pdr/node_modules
            - ./tasks/post-to-cmr/node_modules
            - ./tasks/pdr-status-check/node_modules
            - ./tasks/queue-granules/node_modules
            - ./tasks/queue-pdrs/node_modules
            - ./tasks/sync-granule/node_modules
            - ./tasks/sf-sns-report/node_modules

      - run:
          name: Running eslint
          command: ./node_modules/.bin/eslint packages/api --ext .js
      - run:
          name: Running All Tests except API
          environment:
            LOCALSTACK_HOST: localhost
            # LOCAL_ES_HOST: elastichost
          command: ./node_modules/.bin/nyc ./node_modules/.bin/lerna run test --concurrency 2 --ignore @cumulus/api

      - run:
          name: Running API endpoint Tests
          environment:
            LOCALSTACK_HOST: localhost
            # LOCAL_ES_HOST: elastichost
          command: |
            cd packages/api
            ./node_modules/.bin/nyc ./node_modules/.bin/ava tests/endpoints/*.js
            cp .nyc_output/* ../../.final_nyc_output

      - run:
          name: Running API ES Tests
          environment:
            LOCALSTACK_HOST: localhost
            # LOCAL_ES_HOST: elastichost
          command: |
            cd packages/api
            ./node_modules/.bin/nyc ./node_modules/.bin/ava tests/es/*.js
            cp .nyc_output/* ../../.final_nyc_output

      - run:
          name: Running API migration Tests
          environment:
            LOCALSTACK_HOST: localhost
            # LOCAL_ES_HOST: elastichost
          command: |
            cd packages/api
            ./node_modules/.bin/nyc ./node_modules/.bin/ava tests/migrations/*.js
            cp .nyc_output/* ../../.final_nyc_output

      - run:
          name: Running API Lambda Tests
          environment:
            LOCALSTACK_HOST: localhost
            # LOCAL_ES_HOST: elastichost
          command: |
            cd packages/api
            ./node_modules/.bin/nyc ./node_modules/.bin/ava tests/lambdas/*.js
            cp .nyc_output/* ../../.final_nyc_output

      - run:
          name: Running API cli Tests
          environment:
            LOCALSTACK_HOST: localhost
            # LOCAL_ES_HOST: elastichost
          command: |
            cd packages/api
            ./node_modules/.bin/nyc ./node_modules/.bin/ava tests/cli/*.js
            cp .nyc_output/* ../../.final_nyc_output

      - run:
          name: Running API models Tests
          environment:
            LOCALSTACK_HOST: localhost
            # LOCAL_ES_HOST: elastichost
          command: |
            cd packages/api

            ./node_modules/.bin/nyc ./node_modules/.bin/ava tests/models/*.js
            cp .nyc_output/* ../../.final_nyc_output

      - run:
          name: Running End to End Tests
          environment:
            LOCALSTACK_HOST: localhost
          command: yarn e2e

      - run:
          name: Prepare for Integration Tests
          environment:
            PRODUCTION: true # this will ensure that the integration from source uses the same packaging as the integration from npm packages
          command: |
            source ./example/spec/select

            if [[ ! -z "$RUN_INTEGRATION" ]]; then
              sudo chown -R circleci:circleci /usr/local/bin

              # install cumulus-integration
              ./bin/prepare

              # update stackname 
              cd example 
            fi

      - run:
          name: Deploy cumulus source code to aws
          command: |
            source ./example/spec/select
            if [[ ! -z "$RUN_INTEGRATION" ]]; then
              cd example

              # deploy latest iam roles to aws
              ./node_modules/.bin/kes cf deploy --kes-folder iam --region us-east-1 --deployment $DEPLOYMENT --template node_modules/@cumulus/deployment/iam

              # deploy latest version of the packages to the aws
              ./node_modules/.bin/kes cf deploy --kes-folder app --region us-east-1 --deployment $DEPLOYMENT --template node_modules/@cumulus/deployment/app && ./node_modules/.bin/kes lambda S3AccessTest deploy --kes-folder app --region us-west-1 --deployment $DEPLOYMENT --template node_modules/@cumulus/deployment/app
            fi

      - run:
          name: Run AWS Integration tests 
          command: |
            source ./example/spec/select
            if [[ ! -z "$RUN_INTEGRATION" ]]; then
              cd example

              # run the tests
              echo $DEPLOYMENT
              yarn test
            fi

      - run: 
          name: Checking code coverage
          environment:
            COVERALLS_SERVICE_NAME: circleci
          command: |
            export COVERALLS_SERVICE_JOB_ID=$CIRCLE_BUILD_NUM
            cp .nyc_output/* .final_nyc_output
            yarn coveralls || true

      - store_artifacts:
          path: ~/project/coverage

      - run:
          name: Checkout Latest Tag 
          command: |
            if [[  "$CIRCLE_BRANCH" == 'master' ]]; then
              # checkout the latest tag
              LATEST_GIT_TAG=$(git describe --tags --abbrev=0 --match v*)
              echo $LATEST_GIT_TAG
              git checkout tags/$LATEST_GIT_TAG -b latest_git_tag
              yarn
              yarn ybootstrap
            fi

      - run:
          name: Publish to NPM
          command: |
            if [[  "$CIRCLE_BRANCH" == 'master' ]]; then
              echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
              VERSION=$(cat lerna.json | jq .version --raw-output)
              ./node_modules/.bin/lerna publish --skip-git --repo-version $VERSION --yes --force-publish=* --npm-client=npm
            fi
      
      - run:
          name: Deploy cumulus with the npm packages source code to AWS
          command: |
            if [[  "$CIRCLE_BRANCH" == 'master' ]]; then
              cd example
              yarn
              sed -i -- 's/src/npm/g' spec/config.yml
              ./node_modules/.bin/kes cf deploy --kes-folder iam --region us-east-1 --deployment cumulus-from-npm --template node_modules/@cumulus/deployment/iam
              ./node_modules/.bin/kes cf deploy --kes-folder app --region us-east-1 --deployment cumulus-from-npm --template node_modules/@cumulus/deployment/app && ./node_modules/.bin/kes lambda S3AccessTest deploy --kes-folder app --region us-west-1 --deployment cumulus-from-npm --template node_modules/@cumulus/deployment/app
            fi

      - run:
          name: Run Tests 
          command: |
            if [[  "$CIRCLE_BRANCH" == 'master' ]]; then
              cd example
              DEPLOYMENT=cumulus-from-npm yarn test
            fi